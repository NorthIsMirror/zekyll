#!/usr/bin/env zsh

ZERO="${(%):-%N}"
REPO_DIR="${ZERO%/*}"
# On asciinema 0 and ZERO are functionargzero
[ "$ZERO" = "$REPO_DIR" ] && REPO_DIR="$HOME/.zekyll/zekyll"
source "$REPO_DIR/lib/script_preamble"
source "$REPO_DIR/lib/script_vars"
source "$REPO_DIR/lib/script_functions"

#
# Zparseopts
#

ZKL_PERFORM_WRITE="0"
ZKL_HELP="0"
ZKL_PATH=""
ZKL_ZEKYLLS=""
ZKL_TARGET_ZEKYLLS=""
ZKL_DEFAULT="0"
ZKL_VERBOSE="-s"
ZKL_QUIET="0"
ZKL_NOANSI="0"
ZKL_REPO=""
zparseopts -E -D -A opthash w -write h -help q -quiet p: -path: d -default \
             z: -zkl: Z: -Zkl: v -verbose n -noansi r: -repo: || exit 40

# No dry run
(( ${+opthash[-w]} + ${+opthash[--write]} )) && ZKL_PERFORM_WRITE="1"
(( ${+opthash[-h]} + ${+opthash[--help]} )) && ZKL_HELP="1"
(( ${+opthash[-p]} )) && ZKL_PATH="${opthash[-p]}"
(( ${+opthash[--path]} )) && ZKL_PATH="${opthash[--path]}"
(( ${+opthash[-z]} )) && ZKL_ZEKYLLS="${opthash[-z]}"
(( ${+opthash[--zkl]} )) && ZKL_ZEKYLLS="${opthash[--zkl]}"
(( ${+opthash[-Z]} )) && ZKL_TARGET_ZEKYLLS="${opthash[-Z]}"
(( ${+opthash[--Zkl]} )) && ZKL_TARGET_ZEKYLLS="${opthash[--Zkl]}"
(( ${+opthash[-d]} + ${+opthash[--default]} )) && ZKL_DEFAULT="1"
(( ${+opthash[-v]} + ${+opthash[--verbose]} )) && ZKL_VERBOSE=""
(( ${+opthash[-q]} + ${+opthash[--quiet]} )) && ZKL_QUIET="1"
(( ${+opthash[-n]} + ${+opthash[--noansi]} )) && ZKL_NOANSI="1"
(( ${+opthash[-r]} )) && ZKL_REPO="${opthash[-r]}"
(( ${+opthash[--repo]} )) && ZKL_REPO="${opthash[--repo]}"

noansi

if [ "$ZKL_HELP" = "1" ]; then
    pinfo "Usage: zkl-regenerate [options]"
    print "Translates files from given source zekylls to given destination zekylls."
    print "Moves the files. If you ask to translate zekylls \"abcd\" to \"efgh\", it"
    print "will move ab -> ef and cd -> gh, preserving descriptions of files."
    print
    help-opts
    help-quiet
    help-nansi
    help-verb
    help-dry
    help-path
    help-repo
    help-dft
    help-zkls
    help-zkld
    print "Git mode is deterimed from existence of .git directory"

    exit 0
fi

quiet || dry-mode-msg

#
# Read destination path
# Much of pure control code
#

if [ -n "$ZKL_REPO" ]; then
    local bkp_zkl_path="$ZKL_PATH"
    if resolve_repo; then
        ZKL_PATH="$REPLY"
    else
        qerror "Provided repository doesn't exist (path: $REPLY)"
        # Next try with path if user gave it, or when user gave
        # -d and ZEKYLL_DEFAULT_REPO is not empty
        if [[ -n "$bkp_zkl_path" ]]; then
            ZKL_PATH="$bkp_zkl_path"
            qerror "Trying with provided path: $ZKL_PATH"
        elif [[ "$ZKL_DEFAULT" = "1" && -n "$ZEKYLL_DEFAULT_REPO" ]]; then
            qerror "Trying with ZEKYLL_DEFAULT_REPO: $ZEKYLL_DEFAULT_REPO"
        else
            exit 27
        fi
    fi
fi

REPLY="$ZKL_PATH"
[ "$REPLY" = "" ] && resolve_path
cd_will_work_on "$REPLY" "$ZKL_VERBOSE" || exit 41

#
# Read zekylls
#

local zekylls_string

if [ "$ZKL_ZEKYLLS" = "" ]; then
    qinfo "Enter current zekylls string:"
    vared -cp "src zekylls: " zekylls_string
else
    zekylls_string="$ZKL_ZEKYLLS"
fi

qprint
zekylls_string="${zekylls_string//_/}"
qinfo2 "Read: $zekylls_string"
qprint

local -a zekylls1
zekylls1=( ${(@s:_:)${zekylls_string//(#b)([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])/$match[1]_}} )

qinfo "Checking current zekyll for duplicates..."
detect_duplicates "${zekylls1[@]}" || { qprint "Duplicates found, aborting"; exit 42 }

integer lena="${#zekylls_string}"

local new_string_vis=""
local new_string=""
while (( 1 )); do
    if tgt; then
        new_string_vis="$ZKL_TARGET_ZEKYLLS"
    else
        qinfo "Enter NEW zekylls string:"
        vared -cp "dst zekylls: " new_string_vis
    fi

    # Private copy with underscores removed
    new_string="${new_string_vis//_/}"

    # Difference in number of zekylls
    integer zekylls_a=$(( ${#zekylls_string} / 3 ))
    integer zekylls_b=$(( ${#new_string} / 3 ))
    integer diff=zekylls_a-zekylls_b

    # Difference in characters
    integer lenb=${#new_string}
    integer cdiff=lena-lenb
    local cabsstr="$cdiff"
    cabsstr="${cabsstr#-}"

    if [[ "$diff" -eq "0" ]]; then
        qprint
        qinfo2 "Entered string correct: $new_string"

        if [[ "$cdiff" -lt 0 ]]; then
            qinfo2 "String is longer by $cabsstr character but that's only a remainder"
            qinfo2 "Remainders (uneven characters) are skipped by zekyll"
        elif [[ "$cdiff" -gt 0 ]]; then
            qinfo2 "String is shorter by $cabsstr character but that's only a remainder"
            qinfo2 "Remainders (uneven characters) are skipped by zekyll"
        fi
        
        qprint

        break
    fi

    if [[ "$cdiff" -lt 0 ]]; then
        # Is the difference allowed?
        qprint "The entered string is ${cabsstr} character(s) too long, try again"
        tgt && exit 43

    else
        qprint "The entered string is ${cabsstr} character(s) too short, try again"
        tgt && exit 44
    fi
done

local -a zekylls2
zekylls2=( ${(@s:_:)${new_string//(#b)([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])/$match[1]_}} )

qinfo "Checking new zekyll for duplicates..."
detect_duplicates "${zekylls2[@]}" || { qprint "Duplicates found, aborting"; exit 45 }

qprint

#
# Check for collisions with remaining (uncovered) files
#

qinfo "Checking for collisions with remaining files..."

# Get list of zekylls that are not in zekylls1 list, but exist on filesystem
# First get all zekylls
local -a all_zekylls
all_zekylls=( [a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9].[A-Z]--*(N.) )
if [[ "$#all_zekylls" -eq 0 ]]; then
    qerror "There are no zekylls in current directory, exiting"
    exit 46
fi

# Here we will have them fully extracted, without descriptions and sections
all_zekylls=( "${all_zekylls[@]//(#b)([a-zA-Z0-9])([a-zA-Z0-9])([a-zA-Z0-9]).[A-Z]--*/${match[1]}${match[2]}${match[3]}}" )

# Now substract zekylls1 from all_zekylls
local -a subtract
subtract=( "${(@)all_zekylls:|zekylls1}" )

# Now check if target zekylls2 have something in common with
# remaining files i.e. if they collide with remaining files
local -a common
common=( "${(@)subtract:*zekylls2}" )

if [[ "${#common}" -gt 0 ]]; then
    qerror "Collision detected: you would move files to \"${common[@]}\" zekylls"
    qerror "but such files already exist, and weren't covered in current zekylls string"
    exit 47
fi

#
# Now can move files
#

integer size1="${#zekylls1}"
integer size2="${#zekylls2}"
integer size=size1
(( size2 < size1 )) && size=size2

#
# Detect if at git repository
#
USE_GIT="1"
if ! test -d ".git"; then
    USE_GIT="0"
fi

integer i
local -a already_processed
local -a destination_files
for (( i=1; i<=size; i++ )); do
    local zzz1="${zekylls1[i]}"
    local zzz2="${zekylls2[i]}"

    if [[ "${#zzz1}" -eq "1" || "${#zzz1}" -eq "2" || "${#zzz2}" -eq "1" || "${#zzz2}" -eq "2" ]]; then
        qprint "Skipping remainder"
        continue
    fi

    #
    # Get the source file
    #

    local -a zekyll_file1
    zekyll_file1=( ${zzz1}.[A-Z]--*(N.) )

    if [ "${#zekyll_file1}" -eq 0 ]; then
        qprint "Skipping not existing zekyll $zzz1 (targetted to rename to $zzz2)"
        continue
    fi

    #
    # Prepare destination file's name
    #

    local file1="${zekyll_file1[1]}"
    match=( )
    local desc="${file1#(#b)${zzz1}.([A-Z])--}"
    if [[ -z "${match[1]}" ]]; then
        qerror "Error during processing of zekyll ${zzz1}, aborting"
        qerror "Already processed source zekylls are: ${already_processed[@]}"
        exit 48
    fi
    local file2="${zzz2}.${match[1]}--$desc"

    #
    # Move
    #

    if [ "$file1" != "$file2" ]; then
        # Dry run?
        destination_files+=( "$file2" )
        if [ "$ZKL_PERFORM_WRITE" = "1" ]; then
            if [ "$USE_GIT" = "1" ]; then
                qprint git mv "$file1" "_$file2"
                git mv "$file1" "_$file2"
            else
                qprint mv "$file1" "_$file2"
                mv "$file1" "_$file2"
            fi
        else
            if [ "$USE_GIT" = "1" ]; then
                qprint git mv "$file1" "_$file2"
            else
                qprint mv "$file1" "_$file2"
            fi
        fi
    fi

    already_processed+=( "${zzz1}" )
done

# Now move files from names starting with
# "_" into names without underscore

size="${#destination_files}"
for (( i=1; i<=size; i++ )); do
    local file="${destination_files[i]}"
    # Dry run?
    if [ "$ZKL_PERFORM_WRITE" = "1" ]; then
        if [ "$USE_GIT" = "1" ]; then
            qprint git mv "_$file" "$file"
            git mv "_$file" "$file"
        else
            qprint mv "_$file1" "$file2"
            mv "_$file1" "$file2"
        fi
    else
        if [ "$USE_GIT" = "1" ]; then
            qprint git mv "_$file1" "$file2"
        else
            qprint mv "_$file1" "$file2"
        fi
    fi
done


# vim:ft=zsh
