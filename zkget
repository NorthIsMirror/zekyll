#!/usr/bin/env zsh

ZERO="${(%):-%N}"
REPO_DIR="${ZERO%/*}"
# On asciinema 0 and ZERO are functionargzero
[ "$ZERO" = "$REPO_DIR" ] && REPO_DIR="$HOME/.zekyll/zekyll"
source "$REPO_DIR/lib/script_preamble"
source "$REPO_DIR/lib/script_vars"
source "$REPO_DIR/lib/math_functions"
source "$REPO_DIR/lib/script_functions"

#
# Zparseopts
#

ZKL_HELP="0"
ZKL_PATH=""
ZKL_ZEKYLLS=""
ZKL_SILENT="0"
ZKL_DEFAULT="0"
ZKL_NOANSI="0"
ZKL_CODE=""
zparseopts -E -D -A opthash h -help p: -path: z: -zkl: d -default n -noansi || exit 60

(( ${+opthash[-h]} + ${+opthash[--help]} )) && ZKL_HELP="1"
(( ${+opthash[-p]} )) && ZKL_PATH="${opthash[-p]}"
(( ${+opthash[--path]} )) && ZKL_PATH="${opthash[--path]}"
(( ${+opthash[-z]} )) && ZKL_ZEKYLLS="${opthash[-z]}"
(( ${+opthash[--zkl]} )) && ZKL_ZEKYLLS="${opthash[--zkl]}"
(( ${+opthash[-d]} + ${+opthash[--default]} )) && ZKL_DEFAULT="1"
(( ${+opthash[-n]} + ${+opthash[--noansi]} )) && ZKL_NOANSI="1"

noansi

[ -n "$ZKL_ZEKYLLS" ] && ZKL_SILENT="1"

if [ "$ZKL_HELP" = "1" ]; then
    pinfo "Usage: zkl-get [options]"
    print "Asks for zekylls and displays contents of associated files, in the same order as found in zekylls"
    print
    help-opts
    help-path
    help-zkl
    help-dft

    exit 0
fi

#
# Code given?
#

if [ -n "$1" ]; then
    ZKL_CODE="$1"
    if [[ "$ZKL_CODE" != [0-9]##/[a-z0-9]## ]]; then
        qerror "Improper zcode, exiting"
        exit 61
    fi
fi

#
# Read destination path
#

REPLY="$ZKL_PATH"
[ "$REPLY" = "" ] && resolve_path
ZKL_PATH="$REPLY"
if [ "$ZKL_SILENT" = "1" ]; then
    # Silent
    cd_will_work_on "$REPLY" -s || exit 62
else
    # Not silent
    cd_will_work_on "$REPLY" || exit 63
fi

#
# If code was given, establish ZKL_ZEKYLLS basing
# on it, overwriting any user given -z/--zkl string
#

if [ -n "$ZKL_CODE" ]; then
    if [[ "$ZKL_CODE" = (#b)([0-9]##)/([a-z0-9]##) ]]; then
        integer index="${match[1]}"
        local code="${match[2]}"
        ZKL_INDEX="$index"

        set_index "$ZKL_INDEX"
        get_zekylls_for_code "$ZKL_CODE"
        ZKL_ZEKYLLS="$REPLY"
    fi
fi

#
# Read and examine new zekylls string
#

local zekylls_string_vis=""

if [ "$ZKL_ZEKYLLS" = "" ]; then
    vared -cp "Enter zekylls: " zekylls_string_vis
else
    zekylls_string_vis="$ZKL_ZEKYLLS"
fi

zekylls_string="${zekylls_string_vis//_/}"

if [ "$ZKL_SILENT" = "0" ]; then
    print
    pinfo2 "Read: $zekylls_string"
    print
fi

local -a zekylls1
zekylls1=( ${(@s:_:)${zekylls_string//(#b)([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])/$match[1]_}} )

if [ "$ZKL_SILENT" = "0" ]; then
    pinfo "Checking current zekyll for duplicates..."
fi

if ! detect_duplicates "${zekylls1[@]}"; then
    perror "Duplicates found. Continuing to displaying the zekylls"
fi

if [ "$ZKL_SILENT" = "0" ]; then
    print
fi

#
# Skip incomplete zekyll
#

if [ "${#${zekylls1[-1]}}" = "1" ]; then
    zekylls1[-1]=()
fi

#
# Do the listing
#

local -a existing
existing=( )
local zekyll
for zekyll in "${zekylls1[@]}"; do
    zekyll_file=( ${zekyll}.[A-Z]--*(N.) )
    if [[ "$#zekyll_file" -eq 0 ]]; then
        perror "No such zekyll $zekyll"
    else
        existing+=( "$zekyll" )
    fi
done

for zekyll in "${existing[@]}"; do
    zekyll_file=( ${zekyll}.[A-Z]--*(N.) )
    if [[ "$#zekyll_file" -eq 0 ]]; then
        perror "No such zekyll $zekyll"
    else
        cat "${zekyll_file[1]}"
    fi
done
