#!/usr/bin/env zsh

ZERO="${(%):-%N}"
REPO_DIR="${ZERO%/*}"
source "$REPO_DIR/lib/script_preamble"
source "$REPO_DIR/lib/script_vars"
source "$REPO_DIR/lib/script_functions"
source "$REPO_DIR/lib/math_functions"

#
# Zparseopts
#

ZKL_PERFORM_WRITE="0"
ZKL_HELP="0"
ZKL_PATH=""
ZKL_DEFAULT="0"
ZKL_INDEX=""
ZKL_SIZE=""
ZKL_VERBOSE="-s"
ZKL_QUIET="0"
zparseopts -E -D -A opthash h -help q -quiet p: -path: d -default i: -index: s: -size: v -verbose w -write || exit 1

(( ${+opthash[-w]} + ${+opthash[--write]} )) && ZKL_PERFORM_WRITE="1"
(( ${+opthash[-h]} + ${+opthash[--help]} )) && ZKL_HELP="1"
(( ${+opthash[-p]} )) && ZKL_PATH="${opthash[-p]}"
(( ${+opthash[--path]} )) && ZKL_PATH="${opthash[--path]}"
(( ${+opthash[-i]} )) && ZKL_INDEX="${opthash[-i]}"
(( ${+opthash[--index]} )) && ZKL_INDEX="${opthash[--index]}"
(( ${+opthash[-s]} )) && ZKL_SIZE="${opthash[-s]}"
(( ${+opthash[--size]} )) && ZKL_SIZE="${opthash[--size]}"
(( ${+opthash[-d]} + ${+opthash[--default]} )) && ZKL_DEFAULT="1"
(( ${+opthash[-v]} + ${+opthash[--verbose]} )) && ZKL_VERBOSE=""
(( ${+opthash[-q]} + ${+opthash[--quiet]} )) && ZKL_QUIET="1"

if [ "$ZKL_HELP" = "1" ]; then
    pinfo "Usage: zkiresize [options]"
    print "Resizes given index (-i) to given size (-s)"
    print
    help-opts
    help-index
    help-rsize

    exit 0
fi

#
# Input data verification
#

if [[ "$ZKL_SIZE" -lt "0" ]]; then
    quiet || perror "Negative index size given, aborting"
    exit 1
fi

if [[ "$ZKL_SIZE" -gt "150" ]]; then
    quiet || perror "Maximum index size is 150, aborting"
    exit 1
fi

#
# Read destination path
#

REPLY="$ZKL_PATH"
[ "$REPLY" = "" ] && resolve_path
ZKL_PATH="$REPLY"
cd_will_work_on "$REPLY" "$ZKL_VERBOSE" || exit 1

#
# Work on the index
#

# Sets ZKL_INDEX_ZEKYLLS array. It is used by the index
# subsystem as reference of what files are potentially
# part of current index
set_index "$ZKL_INDEX"

# Check
if compute_index_size_check_consistency "$ZKL_INDEX"; then
    quiet || pinfo2 "Index of size $REPLY is consistent"
    quiet || print
else
    quiet || perror "Inconsistent index (of size $REPLY)! The problematic file is:" "${reply[@]}"
    quiet || perror "It is not in sequence with other files."
    exit 1
fi

integer size="$REPLY"
local -a files
files=( "${reply[@]}" )

if [ "$ZKL_SIZE" = "" ]; then
    quiet || pinfo "You didn't request resize. Here are files of index $ZKL_INDEX, bye:"
    print -rl -- "${files[@]}"
    exit 0
fi

if [[ "$ZKL_SIZE" -gt "$size" ]]; then
    quiet || pinfo "Requested index is greater, will create zekylls"

    # What zekylls need to be created?
    local -a new_zekylls
    integer lim="$ZKL_SIZE"
    new_zekylls=( "${(@)ZKL_INDEX_ZEKYLLS[size+1, lim]}" )
    if [ "$ZKL_PERFORM_WRITE" = "1" ]; then
        quiet || pinfon "Will create zekylls: "
    else
        quiet || pinfon "Would create zekylls (dry mode): "
    fi
    quiet || print ${new_zekylls[@]}
    quiet || print

    local write
    [ "$ZKL_PERFORM_WRITE" = "1" ] && write="-w"
    zkcreate -p "$ZKL_PATH" $write -z "${(j::)new_zekylls}"
else
    if [ "$ZKL_REMOVE" = "1" ]; then
        quiet || pinfo "Requested index is smaller, and deletion of zekylls requested"
    else
        quiet || pinfo "Requested index is smaller, zekylls will be moved to \"_\"-beginning file names"
    fi

    # What zekylls need to be deleted?
    local -a kept_zekylls del_zekylls
    integer lim="$ZKL_SIZE"
    kept_zekylls=( "${(@)files[1,lim]}" )
    del_zekylls=( "${(@)files:|kept_zekylls}" )

    [[ "$ZKL_SIZE" -eq 0 ]] && perror "Will delete whole index"

    if [[ ! quiet && "$ZKL_PERFORM_WRITE" = "1" ]]; then
        pinfo "Will delete following zekylls, are you sure? [y/n]"
        print
        print -rl -- "${del_zekylls[@]}"
        print

        local key
        read -qs key

        if [ "$key" = "n" ]; then
            perror "No agreement to continue, exiting"
            exit 1
        fi
    fi

    local f
    for f in "${del_zekylls[@]}"; do
        quiet || echo "mv ${ZKLCOL[info2]}$f${ZKLCOL[rst]} _$f"
        if [ "$ZKL_PERFORM_WRITE" = "1" ]; then
            command mv "$f" "_$f"
        fi
    done
fi
