#!/usr/bin/env zsh

0="${(%):-%N}"
REPO_DIR="${0%/*}"
source "$REPO_DIR/lib/script_preamble"
source "$REPO_DIR/lib/script_functions"

#
# Zparseopts
#

ZKL_HELP="0"
zparseopts -E -D -A opthash h -help || exit 1

(( ${+opthash[-h]} + ${+opthash[--help]} )) && ZKL_HELP="1"

if [ "$ZKL_HELP" = "1" ]; then
    pinfo "Usage: zekyll-view-zekylls"
    print "Asks for zekylls, and displays selection list with them, launching \$EDITOR at each selection"

    exit 0
fi

#
# Read destination path
#

read_destination_path || exit 1
cd_will_work_on "$REPLY"

#
# Read and examine new zekylls string
#

local zekylls_string_vis=""
vared -cp "Enter zekylls: " zekylls_string_vis

print
zekylls_string="${zekylls_string_vis//_/}"
pinfo2 "Read: $zekylls_string"
print

local -a zekylls1
zekylls1=( ${(@s:_:)${zekylls_string//(#b)([a-zA-Z0-9][a-zA-Z0-9])/$match[1]_}} )

pinfo "Checking current zekyll for duplicates..."
if ! detect_duplicates "${zekylls1[@]}"; then
    perror "Duplicates found, restaring, but continuing to listing the zekylls"
fi

print

#
# Skip incomplete zekyll
#

if [ "${#${zekylls1[-1]}}" = "1" ]; then
    zekylls1[-1]=()
fi

#
# List zekylls to terminal, inform about
# non-existing ones, compute existing ones
#

local -a existing
existing=( )
local zekyll
for zekyll in "${zekylls1[@]}"; do
    zekyll_file=( ${zekyll}--*(N.) )
    if [[ "$#zekyll_file" -eq 0 ]]; then
        perror "No such zekyll $zekyll"
    else
        existing+=( "$zekyll" )
        pinfo2 "-> ${zekyll_file[1]}"
    fi
done

print

[[ "${#existing}" -eq 0 ]] && exit 0

#
# Display list of zekylls and open editor for any selection
#

local -a files
files=( ${^existing}--*(N.) )

while (( 1 )); do
    local selection=""
    selection=$( "$REPO_DIR/zsh-select-zekyll" "${files[@]}" )

    [ "$selection" = "" ] && break

    "${EDITOR:-vim}" "$selection"
done
