#!/usr/bin/env zsh

ZERO="${(%):-%N}"
REPO_DIR="${ZERO%/*}"
# On asciinema 0 and ZERO are functionargzero
[ "$ZERO" = "$REPO_DIR" ] && REPO_DIR="$HOME/.zekyll/zekyll"
source "$REPO_DIR/lib/script_preamble"
source "$REPO_DIR/lib/script_vars"
source "$REPO_DIR/lib/script_functions"

#
# Zparseopts
#

ZKL_PERFORM_WRITE="0"
ZKL_ADD_GIT="0"
ZKL_HELP="0"
ZKL_PATH=""
ZKL_ZEKYLLS=""
ZKL_DEFAULT="0"
ZKL_VERBOSE="-s"
ZKL_NOANSI="0"
zparseopts -E -D -A opthash w -write g -git h -help p: -path: d -default z: -zkl: v -verbose n -noansi || exit 1

# No dry run
(( ${+opthash[-w]} + ${+opthash[--write]} )) && ZKL_PERFORM_WRITE="1"
(( ${+opthash[-g]} + ${+opthash[--git]} )) && ZKL_ADD_GIT="1"
(( ${+opthash[-h]} + ${+opthash[--help]} )) && ZKL_HELP="1"
(( ${+opthash[-p]} )) && ZKL_PATH="${opthash[-p]}"
(( ${+opthash[--path]} )) && ZKL_PATH="${opthash[--path]}"
(( ${+opthash[-z]} )) && ZKL_ZEKYLLS="${opthash[-z]}"
(( ${+opthash[--zkl]} )) && ZKL_ZEKYLLS="${opthash[--zkl]}"
(( ${+opthash[-d]} + ${+opthash[--default]} )) && ZKL_DEFAULT="1"
(( ${+opthash[-v]} + ${+opthash[--verbose]} )) && ZKL_VERBOSE=""
(( ${+opthash[-n]} + ${+opthash[--noansi]} )) && ZKL_NOANSI="1"

noansi

if [ "$ZKL_HELP" = "1" ]; then
    pinfo "Usage: zkl-create [options]"
    print "Creates files for given zekylls. If you give zekylls: abcd, it"
    print "will create two files ab--*, cd--*, asking you for a description"
    print "for each of them (they can be given empty). Also, will check for"
    print "correctness of zekylls (no duplicates) and for collisions with"
    print "existing files."
    print
    help-opts
    help-dry
    help-git
    help-path
    help-dft
    help-zkl

    exit 0
fi

dry-mode-msg

#
# Read destination path
#

REPLY="$ZKL_PATH"
[ "$REPLY" = "" ] && resolve_path
ZKL_PATH="$REPLY"
cd_will_work_on "$REPLY" "$ZKL_VERBOSE" || exit 1

#
# Read and examine new zekylls string
#

local zekylls_string_vis=""
while (( 1 )); do
    if [ "$ZKL_ZEKYLLS" = "" ]; then
        pinfo "Enter NEW zekylls string:"
        vared -cp "Enter zekylls: " zekylls_string_vis
    else
        zekylls_string_vis="$ZKL_ZEKYLLS"
    fi

    print
    zekylls_string="${zekylls_string_vis//_/}"
    pinfo2 "Read: $zekylls_string"
    print

    local -a zekylls1
    zekylls1=( ${(@s:_:)${zekylls_string//(#b)([a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9])/$match[1]_}} )

    pinfo "Checking current zekyll for duplicates..."
    if ! detect_duplicates "${zekylls1[@]}"; then
        if [ -n "$ZKL_ZEKYLLS" ]; then
            perror "Duplicates found, aborting"
            exit 1
        else
            perror "Duplicates found, restaring"
            continue
        fi
    fi

    print

    #
    # Check for collisions with remaining (uncovered) files
    #

    pinfo "Checking for collisions with remaining files..."

    # Get list of zekylls that are not in zekylls1 list, but exist on filesystem
    # First get all zekylls
    local -a all_zekylls
    all_zekylls=( [a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9].[A-Z]--*(N.) )

    # Here we will have them fully extracted, without descriptions and sections
    all_zekylls=( "${all_zekylls[@]//(#b)([a-zA-Z0-9])([a-zA-Z0-9])([a-zA-Z0-9]).[A-Z]--*/${match[1]}${match[2]}${match[3]}}" )

    # Now check if target zekylls1 have something in common with current files
    local -a common 
    common=( ${all_zekylls:*zekylls1} )

    if [[ "${#common}" -gt 0 ]]; then
        perror "Collisions detected: ${common[@]}, you would create duplicate zekylls, restarting"
        continue
    fi

    break
done

#
# Clear incomplete zekylls
#

if [ "${#${zekylls1[-1]}}" = "1" ]; then
    echo "Removed incomplete zekyll ${zekylls1[-1]}"
    zekylls1[-1]=()
fi

#
# Generate the template files
#

integer count=0
integer all=${#zekylls1}
local zekyll
local -a sections
for zekyll in "${zekylls1[@]}"; do
    count=count+1

    local section=""
    while (( 1 )); do
        echo "Creating ${ZKLCOL[info2]}${zekyll}.A-Z--...${ZKLCOL[rst]} ${ZKLCOL[info3]}($count/$all)${ZKLCOL[rst]}, enter the A-Z, i.e. ${ZKLCOL[info2]}section letter${ZKLCOL[rst]}"
        vared -cp "section: " section

        if [[ "$section" != [A-Z] ]]; then
            print
            perror "Single capital letter A-Z is allowed, try again"
        else
            break
        fi
    done

    sections+=( ".$section" )

    local desc=""
    while (( 1 )); do
        echo "Creating ${ZKLCOL[info2]}${zekyll}--...${ZKLCOL[rst]} ${ZKLCOL[info3]}($count/$all)${ZKLCOL[rst]}, enter ${ZKLCOL[info2]}description${ZKLCOL[rst]}"
        vared -cp "description: " desc

        if [[ "$desc" != [[:blank:]a-zA-Z0-9_-]# ]]; then
            print
            perror "Allowed are letters, digits, underscores, spaces and hyphens, try again"
        else
            break
        fi
    done

    desc="${desc//[[:blank:]]/_}"

    zekyll_file="${zekyll}.${section}--${desc}"
    if [ "$ZKL_ADD_GIT" = "1" ]; then
        if [ "$ZKL_PERFORM_WRITE" = "1" ]; then
            print
            pinfo2 "touch $zekyll_file; git add $zekyll_file"
            touch $zekyll_file; git add $zekyll_file
        else
            print
            pinfo2 "touch $zekyll_file; git add $zekyll_file"
        fi
    else
        if [ "$ZKL_PERFORM_WRITE" = "1" ]; then
            print
            pinfo2 "touch $zekyll_file"
            touch $zekyll_file
        else
            print
            pinfo2 "touch $zekyll_file"
        fi
    fi

    print
done

# Zip zekylls and sections
local -a z v
local p q
z=( "${(@)zekylls1:^sections}" ); for p q in "${z[@]}"; do v+=( "$p$q" ); done

# Handle vim specifically, adding its -p option
if [ "${EDITOR:-vim}" = "vim" ]; then
    local vimopt=" -p"
fi

echo "Your EDITOR string would be: ${EDITOR:-vim}$vimopt" $^v"--*"
echo "Other possibility is: zkl-view-zekylls -p \"$ZKL_PATH\" --zkl $zekylls_string"
