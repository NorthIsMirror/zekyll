# Helper functions
pinfo() { print "${fg_bold[green]}$*$reset_color"; }
pinfon() { print -n "${fg_bold[green]}$*$reset_color"; }
pinfo2() { print "${fg_bold[yellow]}$*$reset_color"; }
pinfo2n() { print -n "${fg_bold[yellow]}$*$reset_color"; }
perror() { print "${fg_bold[red]}$*$reset_color"; }
perrorn() { print -n "${fg_bold[red]}$*$reset_color"; }
clearinput() { repeat 10; do read -rs -k 1 -t; done; }

#
# Standard outputs
#

dry-mode-msg() { [ "$ZKL_PERFORM_WRITE" = "0" ] && pinfo2 "= Dry mode =" || perror "= Actual mode (not-dry) ="; }
help-opts(){ pinfo "Options are:"; }
help-cd()  { print -- "-c/--cd     -- ask for working directory, otherwise it's current directory"; }
help-dry() { print -- "-w/--write  -- actual operation mode - else it is always dry-run mode"; }
help-git() { print -- "-g/--git    -- perform operations with git (to update repository not just files)"; }

#
# Detects duplicates in given array
#

detect_duplicates() {
    local -a sorted
    sorted=( "${(on)@}" )

    integer dups=0

    local prev="" i
    for i in "${sorted[@]}"; do
        if [ "$prev" = "$i" ]; then
            echo "Duplicate zekyll found: $i"
            dups=1
        fi
        prev="$i"
    done

    return $dups
}

#
# Read destination path
#

read_destination_path() {
    local zekylls_path
    pinfo "Where are zekylls located? (default: current directory \".\"):"
    read zekylls_path\?"Enter path: "
    if [ -z "$zekylls_path" ]; then
        zekylls_path="."
    fi

    if ! test -d "$zekylls_path"; then
        perror "Path doesn't exist"
        return 1
    fi

    REPLY="$zekylls_path"
    return 0
}

#
# CD to path and show files there
#
cd_will_work_on() {
    cd "$1"

    print
    pinfo2 "Will work on following files:"
    print

    ls -1

    print
}

# vim:ft=zsh
