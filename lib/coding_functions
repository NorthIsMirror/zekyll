#
# Sets ZKL_INDEX_ZEKYLLS array which contains all
# zekylls that potentially can be part of the
# index
#
set_index() {
    integer index="$1"

    ZKL_INDEX_ZEKYLLS=( )

    # Compute first element pointed to by index
    integer first=$(( (index-1)*150 ))

    integer i
    for (( i=first; i<=(first+150-1); i ++ )); do
        # Convert the number to base 36 with leading zeros
        convert_integer_to_base_36 "$i"
        ZKL_INDEX_ZEKYLLS+=( "$REPLY" )
        #print "$REPLY $i"
    done
    #print -rl "${ZKL_INDEX_ZEKYLLS[@]}"
}

#
# Returns array of file names of files that
# belong to current index
#
get_files_of_index() {
    local -a filter
    filter=( "${ZKL_INDEX_ZEKYLLS[@]//*(#m)/$MATCH.*}" )
    reply=( $^~filter(N) )
}

# Checks what possible files in index exist,
# counts them and checks for holes - which
# would mean inconsistency
#
# It also returns the files
compute_index_size_check_consistency() {
    local -a files

    get_files_of_index

    # Save for return
    local -a files
    files=( "${reply[@]}" )

    # Focus on listing?
    integer listing=0
    [ "$2" = "-f" ] && listing=1

    # Will work on reply
    integer size=${#reply} start_size end_size end=0 consistent=1
    local zzz
    for zzz in "${ZKL_INDEX_ZEKYLLS[@]}"; do
        start_size="${#reply}"
        reply=( "${reply[@]:#$zzz.*(#m)}" )
        end_size="${#reply}"

        #echo "start_size vs end_size - $start_size vs $end_size"
        if [[ "$start_size" -eq "$end_size" ]]; then
            # No match -> end
            end=1
        else
            # Match: must not have been ended earlier
            if (( end == 1 )); then
                if (( listing == 0 )); then
                    # Normal mode: report inconsistent files
                    if [[ "$consistent" -eq "1" ]]; then
                        files=( "$MATCH" )
                        consistent=0
                    else
                        files+=( "$MATCH" )
                    fi
                else
                    # Listing mode: report all files
                    consistent=0
                    break
                fi
            fi
        fi

        if [[ "$end_size" -eq 0 ]]; then
            break
        fi
    done

    REPLY="${#files}"
    reply=( "${files[@]}" )

    return $(( 1-consistent ))
}

# $1 - bits decoded from zcode
# $REPLY = bits to skip
# $reply = ( file "" ref "" repo "" wordref "" chksum "" site "" unused1 "" unused2 "" unused3 "" error "" )
process_meta_data() {
    local -a bits
    bits=( "$@" )
    integer size="$#"

    bits=( "${(Oa)bits[@]}" )
    local strbits="${(j::)bits}"
    integer init_len="${#strbits}"

    local -A decoded
    decoded=(
        file ""
        ref ""
        repo ""
        wordref ""
        chksum ""
        site ""
        unused1 ""
        unused2 ""
        unused3 ""
        error ""
    )

    # Is there SS?
    if [ "${strbits[1,${#codes[ss]}]}" = "${codes[ss]}" ]; then
        strbits="${strbits[${#codes[ss]}+1,-1]}"
        # Is there immediate following SS?
        if [ "${strbits[1,${#codes[ss]}]}" = "${codes[ss]}" ]; then
            # We should skip one SS and there is nothing to decode
            REPLY="${#codes[ss]}"
            reply=( file "" ref "" repo "" wordref "" chksum ""
                    site "" unused1 "" unused2 "" unused3 "" error "" )
            return 0
        fi

        #
        # Follows meta data, decode it
        #

        # keys of the 'decoded' hash
        local current_selector="error"
        integer trylen
        local mat trystr
        while (( 1 )); do
            mat=""
            for (( trylen=1; trylen <= 6; trylen ++ )); do
                # Take substring of len $trylen and check if
                # it matches any Huffman code
                trystr="${strbits[1,trylen]}"
                mat="${rcodes[$trystr]}"
                [ -n "$mat" ] && break
            done

            # General failure in decoding the string
            if [ -z "$mat" ]; then
                REPLY="-1"
                reply=( file "" ref "" repo "" wordref "" chksum ""
                        site "" unused1 "" unused2 "" unused3 "" error "" )
                return 1
            fi

            # Skip decoded bits
            strbits="${strbits[trylen+1,-1]}"

            # Handle what has been matched, either selector or data
            case "$mat" in
                (ss)
                    break
                    ;;
                (file|ref|repo|wordref|chksum|site)
                    current_selector="$mat"
                    ;;
                (unused1|unused2|unused3)
                    current_selector="$mat"
                    ;;
                (*)
                    # File names use "/" to encode "." character. "/" itself is unavailable
                    [[ "$mat" = "/" && "$current_selector" = "file" ]] && mat="."
                    decoded[$current_selector]+="$mat"
                    ;;
            esac
        done

        REPLY="$(( init_len - ${#strbits} ))"
        reply=( "${(kv)decoded[@]}" )
    else
        # No meta data and no special ending of zekyll bits
        REPLY="0"
        reply=( file "" ref "" repo "" wordref "" chksum ""
                site "" unused1 "" unused2 "" unused3 "" error "" )
    fi

    return 0
}

#
# Gets zekylls for given code ($1)
# Also gets meta data: ref, file, repo
# and puts it into $reply array
#
get_zekylls_for_code() {
    local zcode="$1"
    decode_zcode "$zcode"

    local -a bits
    bits=( "${reply[@]}" )

    process_meta_data "${bits[@]}"
    # $reply contains: ( file "" ref "" repo "" wordref "" chksum "" site "" unused1 "" unused2 "" unused3 "" error "" )
    # $REPLY contains: number of final bits that contained the meta data
    local -a meta_reply
    meta_reply=( "${reply[@]}" )

    # Skip bits that were processed as meta data
    bits=( "${(@)bits[1,-1*REPLY-1]}" )
    integer size="${#bits}"

    # Last zekyll from $reply is first zekyll
    # in ZKL_INDEX_ZEKYLLS, thus the size-i+1
    # Less significant bit is first zekyll
    integer i
    local zekylls
    for (( i=size; i>=1; i-- )); do
        if [ "${bits[i]}" = "1" ]; then
            zekylls+="${ZKL_INDEX_ZEKYLLS[size-i+1]}"
        fi
    done

    REPLY="$zekylls"
    reply=( "${meta_reply[@]}" )
}

