#!/usr/bin/env zsh

ZERO="${(%):-%N}"
REPO_DIR="${ZERO%/*}"
source "$REPO_DIR/lib/script_preamble"
source "$REPO_DIR/lib/script_functions"

#
# Zparseopts
#

ZKL_PERFORM_WRITE="0"
ZKL_HELP="0"
ZKL_PATH=""
zparseopts -E -D -A opthash w -write h -help p: -path: || exit 1

# No dry run
(( ${+opthash[-w]} + ${+opthash[--write]} )) && ZKL_PERFORM_WRITE="1"
(( ${+opthash[-h]} + ${+opthash[--help]} )) && ZKL_HELP="1"
(( ${+opthash[-p]} )) && ZKL_PATH="${opthash[-p]}"
(( ${+opthash[--path]} )) && ZKL_PATH="${opthash[--path]}"

if [ "$ZKL_HELP" = "1" ]; then
    pinfo "Usage: zekyll-regenerate [options]"
    print "Translates files from given source zekylls to given destination zekylls."
    print "Moves the files. If you ask to translate zekylls \"abcd\" to \"efgh\", it"
    print "will move ab -> ef and cd -> gh, preserving descriptions of files."
    print
    help-opts
    help-dry
    help-path
    print "Git mode is deterimed from existence of .git directory"

    exit 0
fi

dry-mode-msg

#
# Read destination path
#

REPLY="$ZKL_PATH"
[ "$REPLY" = "" ] && { read_destination_path || exit 1 }
cd_will_work_on "$REPLY"

#
# Read zekylls
#

local zekylls_string
pinfo "Enter current zekylls string:"
read zekylls_string\?"zekylls: "

print
zekylls_string="${zekylls_string//_/}"
pinfo2 "Read: $zekylls_string"
print

local -a zekylls1
zekylls1=( ${(@s:_:)${zekylls_string//(#b)([a-zA-Z0-9][a-zA-Z0-9])/$match[1]_}} )

pinfo "Checking current zekyll for duplicates..."
detect_duplicates "${zekylls1[@]}" || { echo "Duplicates found, aborting"; exit 1 }

integer lena="${#zekylls_string}"

local new_string_vis=""
local new_string=""
while (( 1 )); do
    pinfo "Enter NEW zekylls string:"
    vared -cp "zekylls: " new_string_vis

    # Private copy with underscores removed
    new_string="${new_string_vis//_/}"

    # Difference in number of zekylls
    integer zekylls_a=$(( ${#zekylls_string} / 2 ))
    integer zekylls_b=$(( ${#new_string} / 2 ))
    integer diff=zekylls_a-zekylls_b

    # Difference in characters
    integer lenb=${#new_string}
    integer cdiff=lena-lenb
    local cabsstr="$cdiff"
    cabsstr="${cabsstr#-}"

    if [[ "$diff" -eq "0" ]]; then
        print
        pinfo2 "Entered string correct: $new_string"

        if [[ "$cdiff" -lt 0 ]]; then
            pinfo2 "String is longer by $cabsstr character but that's only a remainder"
            pinfo2 "Remainders (uneven characters) are skipped by zekyll"
        elif [[ "$cdiff" -gt 0 ]]; then
            pinfo2 "String is shorter by $cabsstr character but that's only a remainder"
            pinfo2 "Remainders (uneven characters) are skipped by zekyll"
        fi
        
        print

        break
    fi

    if [[ "$cdiff" -lt 0 ]]; then
        # Is the difference allowed?
        print "The entered string is ${cabsstr} character(s) too long, try again"
    else
        print "The entered string is ${cabsstr} character(s) too short, try again"
    fi
done

local -a zekylls2
zekylls2=( ${(@s:_:)${new_string//(#b)([a-zA-Z0-9][a-zA-Z0-9])/$match[1]_}} )

pinfo "Checking new zekyll for duplicates..."
detect_duplicates "${zekylls2[@]}" || { echo "Duplicates found, aborting"; exit 1 }

print

#
# Check for collisions with remaining (uncovered) files
#

pinfo "Checking for collisions with remaining files..."

# Get list of zekylls that are not in zekylls1 list, but exist on filesystem
# First get all zekylls
local -a all_zekylls
all_zekylls=( [a-zA-Z0-9][a-zA-Z0-9]--*(N.) )
if [[ "$#all_zekylls" -eq 0 ]]; then
    perror "There are no zekylls in current directory, exiting"
    exit 1
fi

# Here we will have them fully extracted, without descriptions
all_zekylls=( "${all_zekylls[@]//(#b)([a-zA-Z0-9])([a-zA-Z0-9])--*/${match[1]}${match[2]}}" )

# Now substract zekylls1 from all_zekylls
local -a subtract
subtract=( ${all_zekylls:|zekylls1} )

# Now check if target zekylls2 have something in common with
# remaining files i.e. if they collide with remaining files
local -a common
common=( ${subtract:*zekylls2} )

if [[ "${#common}" -gt 0 ]]; then
    perror "Collision detected: you would move files to \"${common[@]}\" zekylls"
    perror "but such files already exist, and weren't covered in current zekylls string"
    exit
fi

#
# Now can move files
#

integer size1="${#zekylls1}"
integer size2="${#zekylls2}"
integer size=size1
(( size2 < size1 )) && size=size2

#
# Detect if at git repository
#
cmd=( git mv )
if ! test -d ".git"; then
    cmd=( mv )
fi

integer i
for (( i=1; i<=size; i++ )); do
    local zz1="${zekylls1[i]}"
    local zz2="${zekylls2[i]}"

    if [[ "${#zz1}" -eq "1" || "${#zz2}" -eq "1" ]]; then
        echo "Skipping remainder"
        continue
    fi

    local -a zekyll_file1
    zekyll_file1=( ${zz1}--*(N.) )

    if [ "${#zekyll_file1}" -eq 0 ]; then
        echo "Skipping not existing zekyll $zz1 (targetted to rename to $zz2)"
        continue
    fi

    local file1="${zekyll_file1[1]}"
    local desc="${file1#${zz1}--}"
    local file2="${zz2}--$desc"

    if [ "$file1" != "$file2" ]; then
        # Dry run?
        if [ "$ZKL_PERFORM_WRITE" = "1" ]; then
            "${cmd[@]}" "$file1" "$file2"
        else
            echo "${cmd[@]}" "$file1" "$file2"
        fi
    fi
done

# vim:ft=zsh
